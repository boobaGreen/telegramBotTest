{
  "version": 3,
  "sources": ["../../src/co2.js"],
  "sourcesContent": ["\"use strict\";\n\n/**\n * @typedef {Object} CO2EstimateTraceResultPerByte\n * @property {number|CO2EstimateComponentsPerByte} co2 - The CO2 estimate in grams or its separate components\n * @property {boolean} green - Whether the domain is green or not\n * @property {TraceResultVariablesPerByte} variables - The variables used to calculate the CO2 estimate\n */\n\n/**\n * @typedef {Object} CO2EstimateTraceResultPerVisit\n * @property {number|CO2EstimateComponentsPerVisit} co2 - The CO2 estimate in grams or its separate components\n * @property {boolean} green - Whether the domain is green or not\n * @property {TraceResultVariablesPerVisit} variables - The variables used to calculate the CO2 estimate\n */\n\n/**\n * @typedef {Object} TraceResultVariablesPerByte\n * @property {GridIntensityVariables} gridIntensity - The grid intensity related variables\n */\n/**\n * @typedef {Object} TraceResultVariablesPerVisit\n * @property {GridIntensityVariables} gridIntensity - The grid intensity related variables\n * @property {number} dataReloadRatio - What percentage of a page is reloaded on each subsequent page view\n * @property {number} firstVisitPercentage - What percentage of visits are loading this page for subsequent times\n * @property {number} returnVisitPercentage - What percentage of visits are loading this page for the second or more time\n */\n\n/**\n * @typedef {Object} GridIntensityVariables\n * @property {string} description - The description of the variables\n * @property {number} network - The network grid intensity set by the user or the default\n * @property {number} dataCenter - The data center grid intensity set by the user or the default\n * @property {number} device - The device grid intensity set by the user or the default\n * @property {number} production - The production grid intensity set by the user or the default\n */\n\n/**\n * @typedef {Object} CO2EstimateComponentsPerByte\n * @property {number} networkCO2 - The CO2 estimate for networking in grams\n * @property {number} dataCenterCO2 - The CO2 estimate for data centers in grams\n * @property {number} consumerDeviceCO2 - The CO2 estimate for consumer devices in grams\n * @property {number} productionCO2 - The CO2 estimate for device production in grams\n * @property {number} total - The total CO2 estimate in grams\n */\n\n/**\n * @typedef {Object} CO2EstimateComponentsPerVisit\n * @property {number} 'networkCO2 - first' - The CO2 estimate for networking in grams on first visit\n * @property {number} 'networkCO2 - subsequent' - The CO2 estimate for networking in grams on subsequent visits\n * @property {number} 'dataCenterCO2 - first' - The CO2 estimate for data centers in grams on first visit\n * @property {number} 'dataCenterCO2 - subsequent' - The CO2 estimate for data centers in grams on subsequent visits\n * @property {number} 'consumerDeviceCO2 - first' - The CO2 estimate for consumer devices in grams on first visit\n * @property {number} 'consumerDeviceCO2 - subsequent' - The CO2 estimate for consumer devices in grams on subsequent visits\n * @property {number} 'productionCO2 - first' - The CO2 estimate for device production in grams on first visit\n * @property {number} 'productionCO2 - subsequent' - The CO2 estimate for device production in grams on subsequent visits\n * @property {number} total - The total CO2 estimate in grams\n */\n\nimport OneByte from \"./1byte.js\";\nimport SustainableWebDesign from \"./sustainable-web-design.js\";\n\nimport {\n  GLOBAL_GRID_INTENSITY,\n  RENEWABLES_GRID_INTENSITY,\n} from \"./constants/index.js\";\nimport { parseOptions } from \"./helpers/index.js\";\n\nclass CO2 {\n  constructor(options) {\n    this.model = new SustainableWebDesign();\n    // Using optional chaining allows an empty object to be passed\n    // in without breaking the code.\n    if (options?.model === \"1byte\") {\n      this.model = new OneByte();\n    } else if (options?.model === \"swd\") {\n      this.model = new SustainableWebDesign();\n    } else if (options?.model) {\n      throw new Error(\n        `\"${options.model}\" is not a valid model. Please use \"1byte\" for the OneByte model, and \"swd\" for the Sustainable Web Design model.\\nSee https://developers.thegreenwebfoundation.org/co2js/models/ to learn more about the models available in CO2.js.`\n      );\n    }\n\n    /** @private */\n    this._segment = options?.results === \"segment\";\n  }\n\n  /**\n   * Accept a figure in bytes for data transfer, and a boolean for whether\n   * the domain shows as 'green', and return a CO2 figure for energy used to shift the corresponding\n   * the data transfer.\n   *\n   * @param {number} bytes\n   * @param {boolean} green\n   * @return {number|CO2EstimateComponentsPerByte} the amount of CO2 in grammes or its separate components\n   */\n  perByte(bytes, green = false) {\n    return this.model.perByte(bytes, green, this._segment);\n  }\n\n  /**\n   * Accept a figure in bytes for data transfer, and a boolean for whether\n   * the domain shows as 'green', and return a CO2 figure for energy used to shift the corresponding\n   * the data transfer.\n   *\n   * @param {number} bytes\n   * @param {boolean} green\n   * @return {number|CO2EstimateComponentsPerVisit} the amount of CO2 in grammes or its separate components\n   */\n  perVisit(bytes, green = false) {\n    if (this.model?.perVisit) {\n      return this.model.perVisit(bytes, green, this._segment);\n    } else {\n      throw new Error(\n        `The perVisit() method is not supported in the model you are using. Try using perByte() instead.\\nSee https://developers.thegreenwebfoundation.org/co2js/methods/ to learn more about the methods available in CO2.js.`\n      );\n    }\n  }\n\n  /**\n   * Accept a figure in bytes for data transfer, a boolean for whether\n   * the domain shows as 'green', and an options object.\n   * Returns an object containing CO2 figure, green boolean, and object of the variables used in calculating the CO2 figure.\n   *\n   * @param {number} bytes\n   * @param {boolean} green\n   * @param {Object} options\n   * @return {CO2EstimateTraceResultPerByte} the amount of CO2 in grammes\n   */\n  perByteTrace(bytes, green = false, options = {}) {\n    let adjustments = {};\n    if (options) {\n      // If there are options, parse them and add them to the model.\n      adjustments = parseOptions(options);\n    }\n    return {\n      co2: this.model.perByte(bytes, green, this._segment, adjustments),\n      green,\n      variables: {\n        description:\n          \"Below are the variables used to calculate this CO2 estimate.\",\n        bytes,\n        gridIntensity: {\n          description:\n            \"The grid intensity (grams per kilowatt-hour) used to calculate this CO2 estimate.\",\n          network:\n            adjustments?.gridIntensity?.network?.value ?? GLOBAL_GRID_INTENSITY,\n          dataCenter: green\n            ? RENEWABLES_GRID_INTENSITY\n            : adjustments?.gridIntensity?.dataCenter?.value ??\n              GLOBAL_GRID_INTENSITY,\n          production: GLOBAL_GRID_INTENSITY,\n          device:\n            adjustments?.gridIntensity?.device?.value ?? GLOBAL_GRID_INTENSITY,\n        },\n      },\n    };\n  }\n\n  /**\n   * Accept a figure in bytes for data transfer, a boolean for whether\n   * the domain shows as 'green', and an options object.\n   * Returns an object containing CO2 figure, green boolean, and object of the variables used in calculating the CO2 figure.\n   *\n   * @param {number} bytes\n   * @param {boolean} green\n   * @param {Object} options\n   * @return {CO2EstimateTraceResultPerVisit} the amount of CO2 in grammes\n   */\n  perVisitTrace(bytes, green = false, options = {}) {\n    if (this.model?.perVisit) {\n      let adjustments = {};\n      if (options) {\n        // If there are options, parse them and add them to the model.\n        adjustments = parseOptions(options);\n      }\n\n      return {\n        co2: this.model.perVisit(bytes, green, this._segment, adjustments),\n        green,\n        variables: {\n          description:\n            \"Below are the variables used to calculate this CO2 estimate.\",\n          bytes,\n          gridIntensity: {\n            description:\n              \"The grid intensity (grams per kilowatt-hour) used to calculate this CO2 estimate.\",\n            network:\n              adjustments?.gridIntensity?.network?.value ??\n              GLOBAL_GRID_INTENSITY,\n            dataCenter: green\n              ? RENEWABLES_GRID_INTENSITY\n              : adjustments?.gridIntensity?.dataCenter?.value ??\n                GLOBAL_GRID_INTENSITY,\n            production: GLOBAL_GRID_INTENSITY,\n            device:\n              adjustments?.gridIntensity?.device?.value ??\n              GLOBAL_GRID_INTENSITY,\n          },\n          dataReloadRatio: adjustments?.dataReloadRatio ?? 0.02,\n          firstVisitPercentage: adjustments?.firstVisitPercentage ?? 0.75,\n          returnVisitPercentage: adjustments?.returnVisitPercentage ?? 0.25,\n        },\n      };\n    } else {\n      throw new Error(\n        `The perVisitDetailed() method is not supported in the model you are using. Try using perByte() instead.\\nSee https://developers.thegreenwebfoundation.org/co2js/methods/ to learn more about the methods available in CO2.js.`\n      );\n    }\n  }\n}\n\nexport { CO2 };\nexport default CO2;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2DA,kBAAoB;AACpB,oCAAiC;AAEjC,uBAGO;AACP,qBAA6B;AAE7B,MAAM,IAAI;AAAA,EACR,YAAY,SAAS;AACnB,SAAK,QAAQ,IAAI,sCAAqB;AAGtC,QAAI,oCAAS,WAAU,SAAS;AAC9B,WAAK,QAAQ,IAAI,oBAAQ;AAAA,IAC3B,WAAW,oCAAS,WAAU,OAAO;AACnC,WAAK,QAAQ,IAAI,sCAAqB;AAAA,IACxC,WAAW,mCAAS,OAAO;AACzB,YAAM,IAAI,MACR,IAAI,QAAQ;AAAA,mHACd;AAAA,IACF;AAGA,SAAK,WAAW,oCAAS,aAAY;AAAA,EACvC;AAAA,EAWA,QAAQ,OAAO,QAAQ,OAAO;AAC5B,WAAO,KAAK,MAAM,QAAQ,OAAO,OAAO,KAAK,QAAQ;AAAA,EACvD;AAAA,EAWA,SAAS,OAAO,QAAQ,OAAO;AA7GjC;AA8GI,QAAI,WAAK,UAAL,mBAAY,UAAU;AACxB,aAAO,KAAK,MAAM,SAAS,OAAO,OAAO,KAAK,QAAQ;AAAA,IACxD,OAAO;AACL,YAAM,IAAI,MACR;AAAA,qHACF;AAAA,IACF;AAAA,EACF;AAAA,EAYA,aAAa,OAAO,QAAQ,OAAO,UAAU,CAAC,GAAG;AAjInD;AAkII,QAAI,cAAc,CAAC;AACnB,QAAI,SAAS;AAEX,oBAAc,iCAAa,OAAO;AAAA,IACpC;AACA,WAAO;AAAA,MACL,KAAK,KAAK,MAAM,QAAQ,OAAO,OAAO,KAAK,UAAU,WAAW;AAAA,MAChE;AAAA,MACA,WAAW;AAAA,QACT,aACE;AAAA,QACF;AAAA,QACA,eAAe;AAAA,UACb,aACE;AAAA,UACF,SACE,wDAAa,kBAAb,mBAA4B,YAA5B,mBAAqC,UAAS;AAAA,UAChD,YAAY,QACR,6CACA,wDAAa,kBAAb,mBAA4B,eAA5B,mBAAwC,UACxC;AAAA,UACJ,YAAY;AAAA,UACZ,QACE,wDAAa,kBAAb,mBAA4B,WAA5B,mBAAoC,UAAS;AAAA,QACjD;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EAYA,cAAc,OAAO,QAAQ,OAAO,UAAU,CAAC,GAAG;AAzKpD;AA0KI,QAAI,WAAK,UAAL,mBAAY,UAAU;AACxB,UAAI,cAAc,CAAC;AACnB,UAAI,SAAS;AAEX,sBAAc,iCAAa,OAAO;AAAA,MACpC;AAEA,aAAO;AAAA,QACL,KAAK,KAAK,MAAM,SAAS,OAAO,OAAO,KAAK,UAAU,WAAW;AAAA,QACjE;AAAA,QACA,WAAW;AAAA,UACT,aACE;AAAA,UACF;AAAA,UACA,eAAe;AAAA,YACb,aACE;AAAA,YACF,SACE,wDAAa,kBAAb,mBAA4B,YAA5B,mBAAqC,UACrC;AAAA,YACF,YAAY,QACR,6CACA,wDAAa,kBAAb,mBAA4B,eAA5B,mBAAwC,UACxC;AAAA,YACJ,YAAY;AAAA,YACZ,QACE,wDAAa,kBAAb,mBAA4B,WAA5B,mBAAoC,UACpC;AAAA,UACJ;AAAA,UACA,iBAAiB,4CAAa,oBAAmB;AAAA,UACjD,sBAAsB,4CAAa,yBAAwB;AAAA,UAC3D,uBAAuB,4CAAa,0BAAyB;AAAA,QAC/D;AAAA,MACF;AAAA,IACF,OAAO;AACL,YAAM,IAAI,MACR;AAAA,qHACF;AAAA,IACF;AAAA,EACF;AACF;AAGA,IAAO,cAAQ;",
  "names": []
}
